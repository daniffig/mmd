<?php


/**
 * Skeleton subclass for representing a row from the 'venta' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Sun Jun 10 21:12:29 2012
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class Venta extends BaseVenta {

  private $productos = array();

  public function __toString()
  {
    return $this->getCliente();
  }

  public function puedoVerFactura()
  {
    return $this->getEsFinalizado(); 
  }

  public function puedoRecuperarVenta()
  {
    return !$this->getEsFinalizado();
  }

  public function tieneProductos()
  {
    return ($this->countProductoVentas() != 0);
  }

  public function agregarProducto(Producto $producto)
  {
    $producto_venta = new ProductoVenta();
    $producto_venta->setProducto($producto);
    $producto_venta->setPrecioUnitario($producto->getPrecio());
    $producto_venta->setCantidad(0);

    $this->addProductoVenta($producto_venta);
  }

  public function getProductos()
  {
    return $this->getProductoVentas();
  }

  public function getProductoVenta(Producto $producto, Venta $venta)
  {
    $criteria = new Criteria();
    
    $criteria->add(ProductoVentaPeer::PRODUCTO_ID, $producto->getId());
    $criteria->add(ProductoVentaPeer::VENTA_ID, $venta->getId());

    return ProductoVentaPeer::doSelectOne($criteria);
  }

  public function getInstanciaProductoVenta(Producto $producto)
  {
    $venta = sfContext::getInstance()->getUser()->getVenta();

    if (!$producto_venta = $this->getProductoVenta($producto, $venta))
    {
      $producto_venta = new ProductoVenta();

      $producto_venta->setProducto($producto);
      $producto_venta->setVentaId(sfContext::getInstance()->getUser()->getVenta()->getId());
      $producto_venta->setPrecioUnitario($producto->getPrecio());
    }

    return $producto_venta;
  }

  public static function nuevaVentaActiva()
  {
    $usuario = sfContext::getInstance()->getUser()->getGuardUser();

    $venta = new Venta();
    $venta->setCreatedBy($usuario);
    $venta->setClienteId(sfConfig::get('app_cliente_sin_seleccionar'));
    $venta->setSucursal($usuario->getProfile()->getSucursal());
    $venta->setMedioPagoId(sfConfig::get('app_medio_pago_sin_seleccionar'));

    $venta->save();

    return $venta;
  }

  public function cancelarVenta()
  {
    $this->delete();
  }

  public function cerrarVenta()
  {
    $productos_venta = $this->getProductos();

    $index = 0;

    foreach ($productos_venta as $producto_venta)
    {
      $datos[$index]['producto'] = $producto_venta->getProducto();
      $datos[$index]['venta']  = $producto_venta->getVenta();
      $datos[$index]['sucursal']  = $datos[$index]['venta']->getSucursal();
      $datos[$index]['stock'] = $datos[$index]['producto']->getStockEnSucursal($datos[$index]['sucursal']);
      $datos[$index]['cantidad'] = $producto_venta->getCantidad();

      if ($datos[$index]['stock']->getCantidad() < $datos[$index]['cantidad'])
      {
        $errores[] = $datos[$index]['producto'];
      }

      $index++;
    }

    if (count($errores) == 0)
    {
      foreach ($datos as $dato)
      {
        $dato['stock']->setCantidad($dato['stock']->getCantidad() - $dato['cantidad']);
        $dato['stock']->save();
      }
    }

    return $errores;    
  }

  public function getPrecioFormateado()
  {
    return "$ " . number_format($this->getPrecio(), 2, ",", ".");     
  }

  public function getTotal()
  {
    $productos_venta = $this->getProductoVentas();

    $total = 0;

    foreach ($productos_venta as $producto_venta)
    {
      $total += $producto_venta->getPrecioTotal();
    }

    return $total;
  }

  public function getTotalFormateado()
  {
    return "$ " . number_format($this->getTotal(), 2, ",", "."); 
  }

} // Venta
