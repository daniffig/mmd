<?php


/**
 * Skeleton subclass for representing a row from the 'venta' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Sun Jun 10 21:12:29 2012
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class Venta extends BaseVenta {

  private $productos = array();

  public function __toString()
  {
    return $this->getCliente();
  }

  public function puedoVerFactura()
  {
    return $this->getEsFinalizado(); 
  }

  public function puedoRecuperarVenta()
  {
    return !$this->getEsFinalizado();
  }

  public function agregarProducto(Producto $producto)
  {
    $producto_venta = new ProductoVenta();
    $producto_venta->setProducto($producto);
    $producto_venta->setPrecioUnitario($producto->getPrecio());
    $producto_venta->setCantidad(0);

    $this->addProductoVenta($producto_venta);
  }

  public function getProductos()
  {
    return $this->getProductoVentas();
  }

  public function getProducto(Producto $producto)
  {
    $criteria = new Criteria();
    $criteria->add(ProductoVentaPeer::PRODUCTO_ID, $producto->getId());

    if ($producto_venta = $this->getProductoVentas($criteria))
    {
      return $producto_venta[0];
    }    
  }

  public static function nuevaVentaActiva()
  {
    $venta = new Venta();
    $venta->setCreatedBy(sfContext::getInstance()->getUser()->getGuardUser());
    $venta->setClienteId(sfConfig::get('app_cliente_sin_seleccionar'));
    $venta->setMedioPagoId(sfConfig::get('app_medio_pago_sin_seleccionar'));

    $venta->save();

    return $venta;
  }

  public function getProductoVenta(ProductoVenta $producto_venta)
  {
    $criteria = new Criteria();
    
    $criteria->add(ProductoVentaPeer::PRODUCTO_ID, $producto_venta->getProductoId());
    $criteria->add(ProductoVentaPeer::VENTA_ID, $producto_venta->getVentaId());

    return ProductoVentaPeer::doSelectOne($criteria);
  }

  public function cancelarVenta()
  {
    $this->delete();
  }

  public function getTotal()
  {
    $productos_venta = $this->getProductoVentas();

    $total = 0;

    foreach ($productos_venta as $producto_venta)
    {
      $total += $producto_venta->getPrecioTotal();
    }

    return $total;
  }

  public function getTotalFormateado()
  {
    return "$ " . number_format($this->getTotal(), 2, ",", "."); 
  }

} // Venta
