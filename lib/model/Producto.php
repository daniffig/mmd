<?php


/**
 * Skeleton subclass for representing a row from the 'Producto' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Thu May 24 02:53:51 2012
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class Producto extends BaseProducto {

  public function __toString()
  {
    return $this->getMarca() . " - " . $this->getModelo();
  }

  public function puedoActivar()
  {
    return !$this->getEsActivo();
  }

  public function activar()
  {
    $this->setEsActivo(true);
    $this->save();
  }

  public function puedoDesactivar()
  {
    $criteria = new Criteria();
    $criteria->add(VentaPeer::ES_ACTIVO, true);

    $producto_ventas = $this->getProductoVentas();

    $ventas_activas = 0;

    foreach ($producto_ventas as $producto_venta)
    {
      if (!$producto_venta->getVenta()->getEsFinalizado())
      {
        $ventas_activas++;
      }
    }

    $ventas_activas = $ventas_activas > 0;

    return !$this->puedoActivar() && !$ventas_activas;
  }

  public function desactivar()
  {
    $this->setEsActivo(false);
    $this->save();
  }

  public function puedoAgregarProductoVenta()
  {
    $usuario = sfContext::getInstance()->getUser();

    return ($this->getEsActivo() && $usuario->tieneVenta() && ($this->getCantidadStockEnSucursalActiva() > 0));
  }

  public function getStock()
  {
    return true;
  }

  public function getCategoria()
  {
    $this->getTipoProducto()->getCategoria();
  }

  public function getStockEnSucursalActiva()
  {
    $usuario = sfContext::getInstance()->getUser();

    $criteria = new Criteria();
    $criteria->add(StockProductoSucursalPeer::SUCURSAL_ID, $usuario->getGuardUser()->getProfile()->getSucursalId());

    if ($stock = $this->getStockProductoSucursals($criteria))
    {
      return $stock[0];
    }
    else
    {
      return false;
    }
  }

  public function getCantidadStockEnSucursalActiva()
  {
    if ($stock = $this->getStockEnSucursalActiva())
    {
      return $stock->getCantidad();
    }
    else
    {
      return 0; 
    }
  }

  public function getImagenCompleta()
  {
    $root= '/uploads/productos/';
    $img = pathinfo($this->getImagen());

    if (!file_exists($this->getImagen()))
    {
      return $root . 'default.png';
    }
    else
    {
      return $root . $img['basename'];
    }
  }

  public function getImagenThumb()
  {
    $root= '/uploads/productos/';
    $img = pathinfo($this->getImagen());

    if (!file_exists($this->getImagen()))
    {
      return $root . 'default_thumb.png';
    }
    else
    {
      return $root . $img['filename'] . '_thumb.' . $img['extension'];
    }
  }

  public function getStockEnSucursal(Sucursal $sucursal)
  {
    $criteria = new Criteria();
    $criteria->add(StockProductoSucursalPeer::SUCURSAL_ID, $sucursal->getId());

    $stock_producto_sucursal = $this->getStockProductoSucursals($criteria);

    return $stock_producto_sucursal[0];
  }

} // Producto
